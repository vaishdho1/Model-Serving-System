syntax = "proto3";

package headnode;

import "google/protobuf/empty.proto";
import "common.proto";
service WorkerManagementService {
  // Worker Calls
  rpc SendHealthStatus(HealthStatusUpdate) returns(HealthStatusReply);
  //Worker Node calls 
  rpc RegisterNode(RegisterRequest) returns(RegisterReply);
  //Worker Node calls
  rpc RecordMetrics(MetricsRequest) returns (MetricsReply);
}

service ProxyManagementService{
    //Proxy calls this
    rpc SubscribeToRoutingUpdates(SubscriptionRequest) returns (stream RoutingUpdate) {}
   //HeadNode calls ping
}


message MetricsRequest
{
    uint32 worker_id = 1;
    uint32 replica_id = 2;
    float avg_requests = 3;
    uint64 sent_time_stamp = 4;
    uint32 queue_size = 5;
}
message MetricsReply
{
  bool acknowledge = 1;
}



message Resource {
  uint32 used_resources = 1; // Number of resources used
  string name = 2;           // The name of the resource
  string state = 3;          // One of running, idle, killed
  uint32 queue_length = 4;     // Number of active requests in queue
}

message ReplicaState
{
  uint32 replica_id = 1;
  uint32 queue_size = 2;
  string status = 3; //Whether the actor is dead or alive
}
/*
message HealthStatusUpdate {
  uint32 worker_id = 1;    // The worker ID
  uint32 replica_id = 2;   // The ID of the new generated replica
  Resource resource = 3;   // A single resource object
}
*/
message HealthStatusUpdate {
  uint32 worker_id = 1; // The worker ID
  string state = 2; // Worker state
  repeated ReplicaState replica_states = 3;
}

message HealthStatusReply {
  // E.g., an acknowledgment
  bool ack = 1;
  string isAlive = 2; // This is a message from headNode which says whether the worker node is stillAlive
                      //if not the worker node needs to be killed by the worker node
}
message RegisterRequest{
  uint32 node_id = 1; //ID of the current node, this is handled in the beginning
  string node_address = 2;//Address of the node
  string port = 3;//Port where the worker starts
  string state = 4;//Status of the Node at start up
}
message RegisterReply{
  bool ack = 1;//Head Node acknowledges the system
}

// Request message when a proxy subscribes
message SubscriptionRequest {
  string proxy_id = 1; // To identify the proxy, useful for logging/management
}

// Represents information about a single replica
message ReplicaInfo {
  string replica_id = 1;      // The unique ID for this replica instance
  string address = 2;         // The network address (e.g., "pod_ip:port") for the replica
  //string status = 3;          // Optional: Status like "STARTING", "READY", "STOPPING"
  // You can add more replica-specific metadata here, like node_id, zone, etc.
}

// Represents the data attributes of your DeploymentHandle class
// Renamed to DeploymentInfoMessage for clarity, but you can keep DeploymentHandleMessage
message DeploymentInfoMessage {
  string deployment_id = 1;     // The unique ID for the deployment (your dep_id)
  string endpoint = 2;   // The endpoint for this deployment
  string version = 3;           // The version of the code/config being run
  string status = 4;            // Overall status of the deployment

  // A list containing all active/known replicas for this deployment
  repeated ReplicaInfo replicas = 5;
}

// The update message streamed to proxies
message RoutingUpdate {
  //int64 version = 1;                  // Overall version of this routing snapshot
  // Key: deployment_id (string), Value: DeploymentInfoMessage
  // This map holds multiple 'dep_id: DeploymentHandle' pairs
  map<string, DeploymentInfoMessage> current_deployments = 2;
  int64 timestamp_ns = 3;             // Nanoseconds since epoch for the update
}