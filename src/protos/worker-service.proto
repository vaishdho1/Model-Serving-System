syntax = "proto3";

package protos;

import "google/protobuf/empty.proto";
import "common.proto";

service ReplicaService {
  
  rpc sendHealthupdate(HealthStatus) returns (HealthReply);
  rpc RegisterReplica(replicaStatus) returns (Reply);
  rpc Ping(google.protobuf.Empty) returns (Ack);
}

service HeadNodeService{
  // serve-controller
   rpc CreateReplica(ReplicaCreationRequest) returns (ReplicaCreationReply); 
   //Headnode calls
  rpc SendRequest(ReplicaRequest) returns(stream ReplicaReply);

}
message ReplicaCreationRequest {
 
  string base_node_address = 1; // The node which sends request: Currently only headNode is sending
  uint32 deployment_id = 5;
  uint32 num_cpus = 2; //How many cpus
  uint32 num_gpus = 3; //How many gpus
  string deployment_name = 4; //This is the deployment_name associated with the replica for loading the model
}
message ReplicaCreationReply{
  uint32 worker_id = 1; //The worker id
  uint32 replica_id = 2;//The id of the new generated replica
  bool created = 3;//The status of the replica
  //uint32 deployment_id = 4; // The deployment this belongs to : It loads the model as soon as the request comes
}


message ReplicaRequest{
  uint32 worker_id = 1; //The worker id
  uint32 replica_id = 2;//The id of the new generated replica
  string input = 3; // This is the prompt, since this is an llm
}
message ReplicaReply{
 
  string output = 1; //Only an output streaming
  bool is_error = 2;// If there is an error or not
}


message HealthStatus{
  string status = 1;//Whether busy or Idle.This is used for adding more tasks
  uint32 replica_id = 2;//
}

message HealthReply
{
  bool ack = 1; //Just normal replying
}



message replicaStatus
{
  string state = 1;// Whether Alive or Dead
  uint32 replica_id = 2;//The id of the replica
  uint32 pid = 3;
  string port = 4;//The port where this server starts
  uint32 deployment_id = 5;
}

message Reply
{
  bool ack = 1; // Just normmal replying
}